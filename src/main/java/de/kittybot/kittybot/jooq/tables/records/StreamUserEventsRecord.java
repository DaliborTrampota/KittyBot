/*
 * This file is generated by jOOQ.
 */
package de.kittybot.kittybot.jooq.tables.records;


import de.kittybot.kittybot.jooq.tables.StreamUserEvents;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class StreamUserEventsRecord extends UpdatableRecordImpl<StreamUserEventsRecord> implements Record3<Long, Long, Integer>{

	private static final long serialVersionUID = 1L;

	/**
	 * Create a detached StreamUserEventsRecord
	 */
	public StreamUserEventsRecord(){
		super(StreamUserEvents.STREAM_USER_EVENTS);
	}

	/**
	 * Create a detached, initialised StreamUserEventsRecord
	 */
	public StreamUserEventsRecord(Long steamUserEventId, Long streamUserId, Integer event){
		super(StreamUserEvents.STREAM_USER_EVENTS);

		setSteamUserEventId(steamUserEventId);
		setStreamUserId(streamUserId);
		setEvent(event);
	}

	@Override
	public Record1<Long> key(){
		return (Record1) super.key();
	}

	@Override
	public Row3<Long, Long, Integer> fieldsRow(){
		return (Row3) super.fieldsRow();
	}

	@Override
	public Row3<Long, Long, Integer> valuesRow(){
		return (Row3) super.valuesRow();
	}

	@Override
	public Field<Long> field1(){
		return StreamUserEvents.STREAM_USER_EVENTS.STEAM_USER_EVENT_ID;
	}

	// -------------------------------------------------------------------------
	// Primary key information
	// -------------------------------------------------------------------------

	@Override
	public Field<Long> field2(){
		return StreamUserEvents.STREAM_USER_EVENTS.STREAM_USER_ID;
	}

	// -------------------------------------------------------------------------
	// Record3 type implementation
	// -------------------------------------------------------------------------

	@Override
	public Field<Integer> field3(){
		return StreamUserEvents.STREAM_USER_EVENTS.EVENT;
	}

	@Override
	public Long value1(){
		return getSteamUserEventId();
	}

	@Override
	public Long value2(){
		return getStreamUserId();
	}

	@Override
	public Integer value3(){
		return getEvent();
	}

	@Override
	public StreamUserEventsRecord value1(Long value){
		setSteamUserEventId(value);
		return this;
	}

	@Override
	public StreamUserEventsRecord value2(Long value){
		setStreamUserId(value);
		return this;
	}

	@Override
	public StreamUserEventsRecord value3(Integer value){
		setEvent(value);
		return this;
	}

	@Override
	public StreamUserEventsRecord values(Long value1, Long value2, Integer value3){
		value1(value1);
		value2(value2);
		value3(value3);
		return this;
	}

	@Override
	public Long component1(){
		return getSteamUserEventId();
	}

	/**
	 * Getter for <code>public.stream_user_events.steam_user_event_id</code>.
	 */
	public Long getSteamUserEventId(){
		return (Long) get(0);
	}

	/**
	 * Setter for <code>public.stream_user_events.steam_user_event_id</code>.
	 */
	public StreamUserEventsRecord setSteamUserEventId(Long value){
		set(0, value);
		return this;
	}

	@Override
	public Long component2(){
		return getStreamUserId();
	}

	/**
	 * Getter for <code>public.stream_user_events.stream_user_id</code>.
	 */
	public Long getStreamUserId(){
		return (Long) get(1);
	}

	/**
	 * Setter for <code>public.stream_user_events.stream_user_id</code>.
	 */
	public StreamUserEventsRecord setStreamUserId(Long value){
		set(1, value);
		return this;
	}

	@Override
	public Integer component3(){
		return getEvent();
	}

	// -------------------------------------------------------------------------
	// Constructors
	// -------------------------------------------------------------------------

	/**
	 * Getter for <code>public.stream_user_events.event</code>.
	 */
	public Integer getEvent(){
		return (Integer) get(2);
	}

	/**
	 * Setter for <code>public.stream_user_events.event</code>.
	 */
	public StreamUserEventsRecord setEvent(Integer value){
		set(2, value);
		return this;
	}

}
