/*
 * This file is generated by jOOQ.
 */
package de.kittybot.kittybot.jooq.tables;


import de.kittybot.kittybot.jooq.Keys;
import de.kittybot.kittybot.jooq.Public;
import de.kittybot.kittybot.jooq.tables.records.ReactiveMessagesRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ReactiveMessages extends TableImpl<ReactiveMessagesRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.reactive_messages</code>
     */
    public static final ReactiveMessages REACTIVE_MESSAGES = new ReactiveMessages();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ReactiveMessagesRecord> getRecordType() {
        return ReactiveMessagesRecord.class;
    }

    /**
     * The column <code>public.reactive_messages.id</code>.
     */
    public final TableField<ReactiveMessagesRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.reactive_messages.guild_id</code>.
     */
    public final TableField<ReactiveMessagesRecord, Long> GUILD_ID = createField(DSL.name("guild_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.reactive_messages.user_id</code>.
     */
    public final TableField<ReactiveMessagesRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.reactive_messages.channel_id</code>.
     */
    public final TableField<ReactiveMessagesRecord, Long> CHANNEL_ID = createField(DSL.name("channel_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.reactive_messages.message_id</code>.
     */
    public final TableField<ReactiveMessagesRecord, Long> MESSAGE_ID = createField(DSL.name("message_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.reactive_messages.command_path</code>.
     */
    public final TableField<ReactiveMessagesRecord, String> COMMAND_PATH = createField(DSL.name("command_path"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.reactive_messages.allowed</code>.
     */
    public final TableField<ReactiveMessagesRecord, Long> ALLOWED = createField(DSL.name("allowed"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("'-1'::integer", SQLDataType.BIGINT)), this, "");

    private ReactiveMessages(Name alias, Table<ReactiveMessagesRecord> aliased) {
        this(alias, aliased, null);
    }

    private ReactiveMessages(Name alias, Table<ReactiveMessagesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.reactive_messages</code> table reference
     */
    public ReactiveMessages(String alias) {
        this(DSL.name(alias), REACTIVE_MESSAGES);
    }

    /**
     * Create an aliased <code>public.reactive_messages</code> table reference
     */
    public ReactiveMessages(Name alias) {
        this(alias, REACTIVE_MESSAGES);
    }

    /**
     * Create a <code>public.reactive_messages</code> table reference
     */
    public ReactiveMessages() {
        this(DSL.name("reactive_messages"), null);
    }

    public <O extends Record> ReactiveMessages(Table<O> child, ForeignKey<O, ReactiveMessagesRecord> key) {
        super(child, key, REACTIVE_MESSAGES);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<ReactiveMessagesRecord, Long> getIdentity() {
        return (Identity<ReactiveMessagesRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ReactiveMessagesRecord> getPrimaryKey() {
        return Keys.REACTIVE_MESSAGES_PKEY;
    }

    @Override
    public List<UniqueKey<ReactiveMessagesRecord>> getKeys() {
        return Arrays.<UniqueKey<ReactiveMessagesRecord>>asList(Keys.REACTIVE_MESSAGES_PKEY);
    }

    @Override
    public List<ForeignKey<ReactiveMessagesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ReactiveMessagesRecord, ?>>asList(Keys.REACTIVE_MESSAGES__REACTIVE_MESSAGES_GUILD_ID_FKEY);
    }

    public Guilds guilds() {
        return new Guilds(this, Keys.REACTIVE_MESSAGES__REACTIVE_MESSAGES_GUILD_ID_FKEY);
    }

    @Override
    public ReactiveMessages as(String alias) {
        return new ReactiveMessages(DSL.name(alias), this);
    }

    @Override
    public ReactiveMessages as(Name alias) {
        return new ReactiveMessages(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ReactiveMessages rename(String name) {
        return new ReactiveMessages(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ReactiveMessages rename(Name name) {
        return new ReactiveMessages(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, Long, Long, Long, String, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
