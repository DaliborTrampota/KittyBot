/*
 * This file is generated by jOOQ.
 */
package de.kittybot.kittybot.jooq.tables;


import de.kittybot.kittybot.jooq.Keys;
import de.kittybot.kittybot.jooq.Public;
import de.kittybot.kittybot.jooq.tables.records.ReactiveMessagesRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class ReactiveMessages extends TableImpl<ReactiveMessagesRecord>{

	/**
	 * The reference instance of <code>public.reactive_messages</code>
	 */
	public static final ReactiveMessages REACTIVE_MESSAGES = new ReactiveMessages();
	private static final long serialVersionUID = 1L;
	/**
	 * The column <code>public.reactive_messages.reactive_message_id</code>.
	 */
	public final TableField<ReactiveMessagesRecord, Long> REACTIVE_MESSAGE_ID = createField(DSL.name("reactive_message_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");
	/**
	 * The column <code>public.reactive_messages.guild_id</code>.
	 */
	public final TableField<ReactiveMessagesRecord, Long> GUILD_ID = createField(DSL.name("guild_id"), SQLDataType.BIGINT.nullable(false), this, "");
	/**
	 * The column <code>public.reactive_messages.channel_id</code>.
	 */
	public final TableField<ReactiveMessagesRecord, Long> CHANNEL_ID = createField(DSL.name("channel_id"), SQLDataType.BIGINT.nullable(false), this, "");
	/**
	 * The column <code>public.reactive_messages.message_id</code>.
	 */
	public final TableField<ReactiveMessagesRecord, Long> MESSAGE_ID = createField(DSL.name("message_id"), SQLDataType.BIGINT.nullable(false), this, "");
	/**
	 * The column <code>public.reactive_messages.user_id</code>.
	 */
	public final TableField<ReactiveMessagesRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");
	/**
	 * The column <code>public.reactive_messages.command_path</code>.
	 */
	public final TableField<ReactiveMessagesRecord, String> COMMAND_PATH = createField(DSL.name("command_path"), SQLDataType.VARCHAR(255).nullable(false), this, "");
	/**
	 * The column <code>public.reactive_messages.allowed</code>.
	 */
	public final TableField<ReactiveMessagesRecord, Long> ALLOWED = createField(DSL.name("allowed"), SQLDataType.BIGINT.nullable(false).defaultValue(DSL.field("'-1'::integer", SQLDataType.BIGINT)), this, "");

	/**
	 * Create an aliased <code>public.reactive_messages</code> table reference
	 */
	public ReactiveMessages(String alias){
		this(DSL.name(alias), REACTIVE_MESSAGES);
	}

	private ReactiveMessages(Name alias, Table<ReactiveMessagesRecord> aliased){
		this(alias, aliased, null);
	}

	private ReactiveMessages(Name alias, Table<ReactiveMessagesRecord> aliased, Field<?>[] parameters){
		super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
	}

	/**
	 * Create an aliased <code>public.reactive_messages</code> table reference
	 */
	public ReactiveMessages(Name alias){
		this(alias, REACTIVE_MESSAGES);
	}

	/**
	 * Create a <code>public.reactive_messages</code> table reference
	 */
	public ReactiveMessages(){
		this(DSL.name("reactive_messages"), null);
	}

	public <O extends Record> ReactiveMessages(Table<O> child, ForeignKey<O, ReactiveMessagesRecord> key){
		super(child, key, REACTIVE_MESSAGES);
	}

	@Override
	public ReactiveMessages as(String alias){
		return new ReactiveMessages(DSL.name(alias), this);
	}

	@Override
	public Schema getSchema(){
		return Public.PUBLIC;
	}

	@Override
	public Identity<ReactiveMessagesRecord, Long> getIdentity(){
		return (Identity<ReactiveMessagesRecord, Long>) super.getIdentity();
	}

	@Override
	public UniqueKey<ReactiveMessagesRecord> getPrimaryKey(){
		return Keys.REACTIVE_MESSAGES_PKEY;
	}

	@Override
	public List<UniqueKey<ReactiveMessagesRecord>> getKeys(){
		return Arrays.<UniqueKey<ReactiveMessagesRecord>>asList(Keys.REACTIVE_MESSAGES_PKEY);
	}

	@Override
	public Row7<Long, Long, Long, Long, Long, String, Long> fieldsRow(){
		return (Row7) super.fieldsRow();
	}

	@Override
	public ReactiveMessages as(Name alias){
		return new ReactiveMessages(alias, this);
	}

	/**
	 * Rename this table
	 */
	@Override
	public ReactiveMessages rename(String name){
		return new ReactiveMessages(DSL.name(name), null);
	}

	/**
	 * Rename this table
	 */
	@Override
	public ReactiveMessages rename(Name name){
		return new ReactiveMessages(name, null);
	}

	// -------------------------------------------------------------------------
	// Row7 type methods
	// -------------------------------------------------------------------------

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<ReactiveMessagesRecord> getRecordType(){
		return ReactiveMessagesRecord.class;
	}

}
